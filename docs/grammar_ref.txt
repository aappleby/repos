onenine   = [1-9]
digit     = '0' | onenine
digits    = digit+
integer   = '-'? (digit | onenine digits)
fraction  = '.' digits
sign      = '+' | '-'
exponent  = ('e' | 'E') sign? digits
number    = integer fraction? exponent?

hex       = digit | [a-fA-F]
escape    = ["\/bfnrt] | ('u' hex hex hex hex)
character = ([#x20-#x10FFFF] - '"' - '\') | ('\' escape)
string    = '"' character* '"'

ws        = [ \t\n\r]+
keyword   = "true" | "false" | "null"
value     = object | array | string | number | keyword
member    = string ws? ':' ws? value
values    = value  (ws? ',' ws? value)*
members   = member (ws? ',' ws? member)*
array     = '[' ws? values  ws? ']'
object    = '{' ws? members ws? '}'

json      = object | array



using onenine   = Range<'1', '9'>;
using digit     = Oneof<Atom<'0'>, onenine>;
using digits    = Some<digit>;
using integer   = Seq<Opt<Atom<'-'>>, Oneof<digit, Seq<onenine, digits>>>;
using fraction  = Seq<Atom<'.'>, digits>;
using sign      = Atom<'+', '-'>;
using exponent  = Seq<Atom<'e', 'E'>, Opt<sign>, digits>;
using number    = Seq<integer, Opt<fraction>, Opt<exponent>>;

using hex       = Oneof<digit, Range<'a', 'f', 'A', 'F'>>;
using escape    = Oneof<Charset<"\"\\/bfnrt">, Seq<Atom<'u'>, hex, hex, hex, hex>>;
using character = Oneof<Seq<Not<Atom<'\"'>>, Not<Atom<'\\'>>, Range<0x20, 0x10FFFF>>, Seq<Atom<'\\'>, escape>>;
using string    = Seq<Atom<'"'>, Any<character>, Atom<'"'>>;

using ws        = Some<Atom<' ','\t', '\n', '\r'>>;
using keyword   = Oneof<Lit<"true">, Lit<"false">, Lit<"null">>;
using value     = Oneof<object, array, string, number, keyword>;
using member    = Seq<string, Opt<ws>, Atom<':'>, Opt<ws>, value>;
using values    = Seq<value,  Any<Seq<Opt<ws>, Atom<','>, Opt<ws>, value>>;
using members   = Seq<member, Any<Seq<Opt<ws>, Atom<','>, Opt<ws>, member>>;
using array     = Seq<Atom<'['>, Opt<ws>, values,  Any<ws>, Atom<']'>>;
using object    = Seq<Atom<'{'>, Opt<ws>, members, Opt<ws>, Atom<'}'>>;

using json      = Oneof<object, array>;
